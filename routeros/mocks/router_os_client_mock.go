package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

import (
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"gopkg.in/routeros.v2"
)

// RouterOSClientMock implements routeros.RouterOSClient
type RouterOSClientMock struct {
	t minimock.Tester

	funcAsync          func() (ch1 <-chan error)
	inspectFuncAsync   func()
	afterAsyncCounter  uint64
	beforeAsyncCounter uint64
	AsyncMock          mRouterOSClientMockAsync

	funcClose          func()
	inspectFuncClose   func()
	afterCloseCounter  uint64
	beforeCloseCounter uint64
	CloseMock          mRouterOSClientMockClose

	funcRun          func(sentence ...string) (rp1 *routeros.Reply, err error)
	inspectFuncRun   func(sentence ...string)
	afterRunCounter  uint64
	beforeRunCounter uint64
	RunMock          mRouterOSClientMockRun
}

// NewRouterOSClientMock returns a mock for routeros.RouterOSClient
func NewRouterOSClientMock(t minimock.Tester) *RouterOSClientMock {
	m := &RouterOSClientMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.AsyncMock = mRouterOSClientMockAsync{mock: m}

	m.CloseMock = mRouterOSClientMockClose{mock: m}

	m.RunMock = mRouterOSClientMockRun{mock: m}
	m.RunMock.callArgs = []*RouterOSClientMockRunParams{}

	return m
}

type mRouterOSClientMockAsync struct {
	mock               *RouterOSClientMock
	defaultExpectation *RouterOSClientMockAsyncExpectation
	expectations       []*RouterOSClientMockAsyncExpectation
}

// RouterOSClientMockAsyncExpectation specifies expectation struct of the RouterOSClient.Async
type RouterOSClientMockAsyncExpectation struct {
	mock *RouterOSClientMock

	results *RouterOSClientMockAsyncResults
	Counter uint64
}

// RouterOSClientMockAsyncResults contains results of the RouterOSClient.Async
type RouterOSClientMockAsyncResults struct {
	ch1 <-chan error
}

// Expect sets up expected params for RouterOSClient.Async
func (mmAsync *mRouterOSClientMockAsync) Expect() *mRouterOSClientMockAsync {
	if mmAsync.mock.funcAsync != nil {
		mmAsync.mock.t.Fatalf("RouterOSClientMock.Async mock is already set by Set")
	}

	if mmAsync.defaultExpectation == nil {
		mmAsync.defaultExpectation = &RouterOSClientMockAsyncExpectation{}
	}

	return mmAsync
}

// Inspect accepts an inspector function that has same arguments as the RouterOSClient.Async
func (mmAsync *mRouterOSClientMockAsync) Inspect(f func()) *mRouterOSClientMockAsync {
	if mmAsync.mock.inspectFuncAsync != nil {
		mmAsync.mock.t.Fatalf("Inspect function is already set for RouterOSClientMock.Async")
	}

	mmAsync.mock.inspectFuncAsync = f

	return mmAsync
}

// Return sets up results that will be returned by RouterOSClient.Async
func (mmAsync *mRouterOSClientMockAsync) Return(ch1 <-chan error) *RouterOSClientMock {
	if mmAsync.mock.funcAsync != nil {
		mmAsync.mock.t.Fatalf("RouterOSClientMock.Async mock is already set by Set")
	}

	if mmAsync.defaultExpectation == nil {
		mmAsync.defaultExpectation = &RouterOSClientMockAsyncExpectation{mock: mmAsync.mock}
	}
	mmAsync.defaultExpectation.results = &RouterOSClientMockAsyncResults{ch1}
	return mmAsync.mock
}

//Set uses given function f to mock the RouterOSClient.Async method
func (mmAsync *mRouterOSClientMockAsync) Set(f func() (ch1 <-chan error)) *RouterOSClientMock {
	if mmAsync.defaultExpectation != nil {
		mmAsync.mock.t.Fatalf("Default expectation is already set for the RouterOSClient.Async method")
	}

	if len(mmAsync.expectations) > 0 {
		mmAsync.mock.t.Fatalf("Some expectations are already set for the RouterOSClient.Async method")
	}

	mmAsync.mock.funcAsync = f
	return mmAsync.mock
}

// Async implements routeros.RouterOSClient
func (mmAsync *RouterOSClientMock) Async() (ch1 <-chan error) {
	mm_atomic.AddUint64(&mmAsync.beforeAsyncCounter, 1)
	defer mm_atomic.AddUint64(&mmAsync.afterAsyncCounter, 1)

	if mmAsync.inspectFuncAsync != nil {
		mmAsync.inspectFuncAsync()
	}

	if mmAsync.AsyncMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmAsync.AsyncMock.defaultExpectation.Counter, 1)

		mm_results := mmAsync.AsyncMock.defaultExpectation.results
		if mm_results == nil {
			mmAsync.t.Fatal("No results are set for the RouterOSClientMock.Async")
		}
		return (*mm_results).ch1
	}
	if mmAsync.funcAsync != nil {
		return mmAsync.funcAsync()
	}
	mmAsync.t.Fatalf("Unexpected call to RouterOSClientMock.Async.")
	return
}

// AsyncAfterCounter returns a count of finished RouterOSClientMock.Async invocations
func (mmAsync *RouterOSClientMock) AsyncAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAsync.afterAsyncCounter)
}

// AsyncBeforeCounter returns a count of RouterOSClientMock.Async invocations
func (mmAsync *RouterOSClientMock) AsyncBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmAsync.beforeAsyncCounter)
}

// MinimockAsyncDone returns true if the count of the Async invocations corresponds
// the number of defined expectations
func (m *RouterOSClientMock) MinimockAsyncDone() bool {
	for _, e := range m.AsyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AsyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAsyncCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAsync != nil && mm_atomic.LoadUint64(&m.afterAsyncCounter) < 1 {
		return false
	}
	return true
}

// MinimockAsyncInspect logs each unmet expectation
func (m *RouterOSClientMock) MinimockAsyncInspect() {
	for _, e := range m.AsyncMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RouterOSClientMock.Async")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.AsyncMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterAsyncCounter) < 1 {
		m.t.Error("Expected call to RouterOSClientMock.Async")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcAsync != nil && mm_atomic.LoadUint64(&m.afterAsyncCounter) < 1 {
		m.t.Error("Expected call to RouterOSClientMock.Async")
	}
}

type mRouterOSClientMockClose struct {
	mock               *RouterOSClientMock
	defaultExpectation *RouterOSClientMockCloseExpectation
	expectations       []*RouterOSClientMockCloseExpectation
}

// RouterOSClientMockCloseExpectation specifies expectation struct of the RouterOSClient.Close
type RouterOSClientMockCloseExpectation struct {
	mock *RouterOSClientMock

	Counter uint64
}

// Expect sets up expected params for RouterOSClient.Close
func (mmClose *mRouterOSClientMockClose) Expect() *mRouterOSClientMockClose {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("RouterOSClientMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &RouterOSClientMockCloseExpectation{}
	}

	return mmClose
}

// Inspect accepts an inspector function that has same arguments as the RouterOSClient.Close
func (mmClose *mRouterOSClientMockClose) Inspect(f func()) *mRouterOSClientMockClose {
	if mmClose.mock.inspectFuncClose != nil {
		mmClose.mock.t.Fatalf("Inspect function is already set for RouterOSClientMock.Close")
	}

	mmClose.mock.inspectFuncClose = f

	return mmClose
}

// Return sets up results that will be returned by RouterOSClient.Close
func (mmClose *mRouterOSClientMockClose) Return() *RouterOSClientMock {
	if mmClose.mock.funcClose != nil {
		mmClose.mock.t.Fatalf("RouterOSClientMock.Close mock is already set by Set")
	}

	if mmClose.defaultExpectation == nil {
		mmClose.defaultExpectation = &RouterOSClientMockCloseExpectation{mock: mmClose.mock}
	}

	return mmClose.mock
}

//Set uses given function f to mock the RouterOSClient.Close method
func (mmClose *mRouterOSClientMockClose) Set(f func()) *RouterOSClientMock {
	if mmClose.defaultExpectation != nil {
		mmClose.mock.t.Fatalf("Default expectation is already set for the RouterOSClient.Close method")
	}

	if len(mmClose.expectations) > 0 {
		mmClose.mock.t.Fatalf("Some expectations are already set for the RouterOSClient.Close method")
	}

	mmClose.mock.funcClose = f
	return mmClose.mock
}

// Close implements routeros.RouterOSClient
func (mmClose *RouterOSClientMock) Close() {
	mm_atomic.AddUint64(&mmClose.beforeCloseCounter, 1)
	defer mm_atomic.AddUint64(&mmClose.afterCloseCounter, 1)

	if mmClose.inspectFuncClose != nil {
		mmClose.inspectFuncClose()
	}

	if mmClose.CloseMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmClose.CloseMock.defaultExpectation.Counter, 1)

		return

	}
	if mmClose.funcClose != nil {
		mmClose.funcClose()
		return
	}
	mmClose.t.Fatalf("Unexpected call to RouterOSClientMock.Close.")

}

// CloseAfterCounter returns a count of finished RouterOSClientMock.Close invocations
func (mmClose *RouterOSClientMock) CloseAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.afterCloseCounter)
}

// CloseBeforeCounter returns a count of RouterOSClientMock.Close invocations
func (mmClose *RouterOSClientMock) CloseBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmClose.beforeCloseCounter)
}

// MinimockCloseDone returns true if the count of the Close invocations corresponds
// the number of defined expectations
func (m *RouterOSClientMock) MinimockCloseDone() bool {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		return false
	}
	return true
}

// MinimockCloseInspect logs each unmet expectation
func (m *RouterOSClientMock) MinimockCloseInspect() {
	for _, e := range m.CloseMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Error("Expected call to RouterOSClientMock.Close")
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.CloseMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to RouterOSClientMock.Close")
	}
	// if func was set then invocations count should be greater than zero
	if m.funcClose != nil && mm_atomic.LoadUint64(&m.afterCloseCounter) < 1 {
		m.t.Error("Expected call to RouterOSClientMock.Close")
	}
}

type mRouterOSClientMockRun struct {
	mock               *RouterOSClientMock
	defaultExpectation *RouterOSClientMockRunExpectation
	expectations       []*RouterOSClientMockRunExpectation

	callArgs []*RouterOSClientMockRunParams
	mutex    sync.RWMutex
}

// RouterOSClientMockRunExpectation specifies expectation struct of the RouterOSClient.Run
type RouterOSClientMockRunExpectation struct {
	mock    *RouterOSClientMock
	params  *RouterOSClientMockRunParams
	results *RouterOSClientMockRunResults
	Counter uint64
}

// RouterOSClientMockRunParams contains parameters of the RouterOSClient.Run
type RouterOSClientMockRunParams struct {
	sentence []string
}

// RouterOSClientMockRunResults contains results of the RouterOSClient.Run
type RouterOSClientMockRunResults struct {
	rp1 *routeros.Reply
	err error
}

// Expect sets up expected params for RouterOSClient.Run
func (mmRun *mRouterOSClientMockRun) Expect(sentence ...string) *mRouterOSClientMockRun {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("RouterOSClientMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &RouterOSClientMockRunExpectation{}
	}

	mmRun.defaultExpectation.params = &RouterOSClientMockRunParams{sentence}
	for _, e := range mmRun.expectations {
		if minimock.Equal(e.params, mmRun.defaultExpectation.params) {
			mmRun.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmRun.defaultExpectation.params)
		}
	}

	return mmRun
}

// Inspect accepts an inspector function that has same arguments as the RouterOSClient.Run
func (mmRun *mRouterOSClientMockRun) Inspect(f func(sentence ...string)) *mRouterOSClientMockRun {
	if mmRun.mock.inspectFuncRun != nil {
		mmRun.mock.t.Fatalf("Inspect function is already set for RouterOSClientMock.Run")
	}

	mmRun.mock.inspectFuncRun = f

	return mmRun
}

// Return sets up results that will be returned by RouterOSClient.Run
func (mmRun *mRouterOSClientMockRun) Return(rp1 *routeros.Reply, err error) *RouterOSClientMock {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("RouterOSClientMock.Run mock is already set by Set")
	}

	if mmRun.defaultExpectation == nil {
		mmRun.defaultExpectation = &RouterOSClientMockRunExpectation{mock: mmRun.mock}
	}
	mmRun.defaultExpectation.results = &RouterOSClientMockRunResults{rp1, err}
	return mmRun.mock
}

//Set uses given function f to mock the RouterOSClient.Run method
func (mmRun *mRouterOSClientMockRun) Set(f func(sentence ...string) (rp1 *routeros.Reply, err error)) *RouterOSClientMock {
	if mmRun.defaultExpectation != nil {
		mmRun.mock.t.Fatalf("Default expectation is already set for the RouterOSClient.Run method")
	}

	if len(mmRun.expectations) > 0 {
		mmRun.mock.t.Fatalf("Some expectations are already set for the RouterOSClient.Run method")
	}

	mmRun.mock.funcRun = f
	return mmRun.mock
}

// When sets expectation for the RouterOSClient.Run which will trigger the result defined by the following
// Then helper
func (mmRun *mRouterOSClientMockRun) When(sentence ...string) *RouterOSClientMockRunExpectation {
	if mmRun.mock.funcRun != nil {
		mmRun.mock.t.Fatalf("RouterOSClientMock.Run mock is already set by Set")
	}

	expectation := &RouterOSClientMockRunExpectation{
		mock:   mmRun.mock,
		params: &RouterOSClientMockRunParams{sentence},
	}
	mmRun.expectations = append(mmRun.expectations, expectation)
	return expectation
}

// Then sets up RouterOSClient.Run return parameters for the expectation previously defined by the When method
func (e *RouterOSClientMockRunExpectation) Then(rp1 *routeros.Reply, err error) *RouterOSClientMock {
	e.results = &RouterOSClientMockRunResults{rp1, err}
	return e.mock
}

// Run implements routeros.RouterOSClient
func (mmRun *RouterOSClientMock) Run(sentence ...string) (rp1 *routeros.Reply, err error) {
	mm_atomic.AddUint64(&mmRun.beforeRunCounter, 1)
	defer mm_atomic.AddUint64(&mmRun.afterRunCounter, 1)

	if mmRun.inspectFuncRun != nil {
		mmRun.inspectFuncRun(sentence...)
	}

	mm_params := &RouterOSClientMockRunParams{sentence}

	// Record call args
	mmRun.RunMock.mutex.Lock()
	mmRun.RunMock.callArgs = append(mmRun.RunMock.callArgs, mm_params)
	mmRun.RunMock.mutex.Unlock()

	for _, e := range mmRun.RunMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.rp1, e.results.err
		}
	}

	if mmRun.RunMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmRun.RunMock.defaultExpectation.Counter, 1)
		mm_want := mmRun.RunMock.defaultExpectation.params
		mm_got := RouterOSClientMockRunParams{sentence}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmRun.t.Errorf("RouterOSClientMock.Run got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmRun.RunMock.defaultExpectation.results
		if mm_results == nil {
			mmRun.t.Fatal("No results are set for the RouterOSClientMock.Run")
		}
		return (*mm_results).rp1, (*mm_results).err
	}
	if mmRun.funcRun != nil {
		return mmRun.funcRun(sentence...)
	}
	mmRun.t.Fatalf("Unexpected call to RouterOSClientMock.Run. %v", sentence)
	return
}

// RunAfterCounter returns a count of finished RouterOSClientMock.Run invocations
func (mmRun *RouterOSClientMock) RunAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.afterRunCounter)
}

// RunBeforeCounter returns a count of RouterOSClientMock.Run invocations
func (mmRun *RouterOSClientMock) RunBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmRun.beforeRunCounter)
}

// Calls returns a list of arguments used in each call to RouterOSClientMock.Run.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmRun *mRouterOSClientMockRun) Calls() []*RouterOSClientMockRunParams {
	mmRun.mutex.RLock()

	argCopy := make([]*RouterOSClientMockRunParams, len(mmRun.callArgs))
	copy(argCopy, mmRun.callArgs)

	mmRun.mutex.RUnlock()

	return argCopy
}

// MinimockRunDone returns true if the count of the Run invocations corresponds
// the number of defined expectations
func (m *RouterOSClientMock) MinimockRunDone() bool {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		return false
	}
	return true
}

// MinimockRunInspect logs each unmet expectation
func (m *RouterOSClientMock) MinimockRunInspect() {
	for _, e := range m.RunMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to RouterOSClientMock.Run with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.RunMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		if m.RunMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to RouterOSClientMock.Run")
		} else {
			m.t.Errorf("Expected call to RouterOSClientMock.Run with params: %#v", *m.RunMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcRun != nil && mm_atomic.LoadUint64(&m.afterRunCounter) < 1 {
		m.t.Error("Expected call to RouterOSClientMock.Run")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *RouterOSClientMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockAsyncInspect()

		m.MinimockCloseInspect()

		m.MinimockRunInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *RouterOSClientMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *RouterOSClientMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockAsyncDone() &&
		m.MinimockCloseDone() &&
		m.MinimockRunDone()
}
